import Euterpea

-- ########### Old Code to Learn From ###########
createMajorChord :: (Octave -> Dur -> Music Pitch) -> Music Pitch
createMajorChord root =
  root 4 qn :=: third :=: fifth
  where
    third = transpose 4 (root 4 qn)
    fifth = transpose 7 (root 4 qn)

createMajorChord :: Music a -> Music a
createMajorChord root =
  root :=: third :=: fifth
  where
    third = transpose 4 root
    fifth = transpose 7 root

createMinorChord :: Music a -> Music a
createMinorChord root =
  root :=: third :=: fifth
  where
    third = transpose 3 root
    fifth = transpose 7 root

-- Before I learned of "line" and "chord"
foldMusicSet :: ConcatMusicSet a -> [Music a] -> Music a
foldMusicSet foldFn = foldr foldFn (rest 0)

-- Equivalent
line', chord' :: [Music a] -> Music a
line' = foldR (:+:) (rest 0)
chord' = foldR (:=:) (rest 0)

------------ References from Exercises! ------------
-- Start
addEachPair :: [(Int, Int)] -> [Int]
addEachPair [] = []
addEachPair ((n, m) : rest) = n + m : addEachPair rest

addEachPair' :: [(Int, Int)] -> [Int]
addEachPair' = map (\(n, m) -> n + m)

-- Finished Abstraction
addEachPair' :: [(Int, Int)] -> [Int]
addEachPair' = map (uncurry (+))
